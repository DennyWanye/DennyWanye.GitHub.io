<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://DennyWanye.GitHub.io</id>
    <title>DennyWanye</title>
    <updated>2022-03-31T04:31:39.525Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://DennyWanye.GitHub.io"/>
    <link rel="self" href="https://DennyWanye.GitHub.io/atom.xml"/>
    <subtitle>Keep track of interesting things</subtitle>
    <logo>https://DennyWanye.GitHub.io/images/avatar.png</logo>
    <icon>https://DennyWanye.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2022, DennyWanye</rights>
    <entry>
        <title type="html"><![CDATA[react-helmet：解决单页面应用SEO问题]]></title>
        <id>https://DennyWanye.GitHub.io/post/react-helmetjie-jue-dan-ye-mian-ying-yong-seo-wen-ti/</id>
        <link href="https://DennyWanye.GitHub.io/post/react-helmetjie-jue-dan-ye-mian-ying-yong-seo-wen-ti/">
        </link>
        <updated>2022-03-31T03:54:28.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/270637/pexels-photo-270637.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;h=300" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://images.pexels.com/photos/270637/pexels-photo-270637.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;h=300" alt="" loading="lazy"></figure>
<h3 id="一-单页面seo问题">一、单页面SEO问题</h3>
<p>单页应用一直有一个令人诟病的问题就是就是其对搜索引擎不友好。</p>
<p>究其原因，就是单页应用核心就是 JavaScript 应用，而一般的搜索引擎都只在乎你页面的 HTML 而对于其中的 JavaScript 是不会执行的。</p>
<p>虽然 Google 曾经表示会抓取单页应用（对 Ajax 的结果进行缓存），但是现在已经表示已经不再支持了。</p>
<figure data-type="image" tabindex="3"><img src="https://blog.poi.cat/images/angular-app-in-google-search.png" alt="在 Google 中搜索 Angular 应用，只能显示一个可怜的标题(2017-6-15)" loading="lazy"></figure>
<p>在 Google 中搜索 Angular 应用，只能显示一个可怜的标题(2017-6-15)</p>
<p>难道单页应用就是不能实现 SEO 吗？并不是，还是可以通过一种名叫 Server-side rendering （服务器端预渲染）的方式来实现的。</p>
<h3 id="二-react-snapshot-react-helmet">二、react-snapshot &amp; react-helmet</h3>
<p>想调用 React 的 Server-side Rendering 的 API 的话，最简单的方法是使用 react-snapshot。</p>
<p>它和 creat-react-app（一个类似 Angular Cli 的命令行工具）整合得很好，只需要将 <code>render()</code> 替换成 React-Snaport 提供的 <code>render()</code> 即可。它会在 Developer Mode 的时候调用 <code>Render.render()</code> 和之前一样；在 Production Mode 的时候调用 <code>ReactDomServer.toSting()</code>。</p>
<p>在运行 <code>react-scripts build</code> 后再运行 <code>react-snapshot</code>，就会开启一个爬虫，将所以的页面遍历一遍后，导出至 HTML。</p>
<p>运行结果：</p>
<figure data-type="image" tabindex="4"><img src="https://blog.poi.cat/images/react-snapshot-output.png" alt="React Snapshot" loading="lazy"></figure>
<p>使用 w3m 访问 About 页面的结果：</p>
<figure data-type="image" tabindex="5"><img src="https://blog.poi.cat/images/view-solomon-in-w3m.png" alt="w3m 中的 solomon" loading="lazy"></figure>
<p>同时也保留了单页应用不需要重复加载的优点：</p>
<figure data-type="image" tabindex="6"><img src="https://blog.poi.cat/images/less-request-in-spa.png" alt="从 About 页面进入之后，我重复切换了几次页面，但是 Network 里都没有出现新的请求" loading="lazy"></figure>
<h4 id="原理">原理：</h4>
<p>原理是什么？每一个单页应用都有一个 <code>index.html</code> 作为的入口。</p>
<p>而使用了 react-snapshot 之后你的单页应用相当于有了同时多个不同入口，或者说你同时拥有了复数多个功能相同的单页应用。</p>
<h4 id="结论">结论：</h4>
<p>如果说 react-snapshot 让你的单页应用里的 <code>body</code> 标签搜索引擎可见的话，那 react-helmet 就可以让你的单页应里的 <code>head</code> 标签能被搜索引擎爬到了。</p>
<p>而 <code>head</code> 中的 <code>meta</code> 标签更是 SEO 的关键之一，通过它我们可以主动给爬虫提供重要的信息，例如文章的作者，发布时间等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tip]]></title>
        <id>https://DennyWanye.GitHub.io/post/tip/</id>
        <link href="https://DennyWanye.GitHub.io/post/tip/">
        </link>
        <updated>2022-03-11T08:58:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="scss-混合">scss 混合</h2>
<pre><code class="language-scss">

@mixin center($widthCenter) {
  width: $widthCenter;
  margin: 0 auto;
}

@mixin  flex($justify,$row:row,$align: none) {
  display: flex;
  flex-direction: $row;
  justify-content: $justify;
  @if $align != none {
    align-items: $align;
  }
}
</code></pre>
<h2 id="滚动条长度">滚动条长度</h2>
<pre><code class="language-js">let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
</code></pre>
<h2 id="input修改placeholder">input修改placeholder</h2>
<pre><code class="language-html">.xjp-login form .xjp-login-text input::-webkit-input-placeholder {
      font-size: .28rem;
      font-family: Arial;
      font-weight: bold;
      color: white;
      text-align: center; }
    .xjp-login form .xjp-login-text input::-moz-placeholder {
      /* Mozilla Firefox 19+ */
      font-size: .28rem;
      font-family: Arial;
      font-weight: bold;
      color: white;
      text-align: center; }
    .xjp-login form .xjp-login-text input:-moz-placeholder {
      /* Mozilla Firefox 4 to 18 */
      font-size: .28rem;
      font-family: Arial;
      font-weight: bold;
      color: white;
      text-align: center; }
    .xjp-login form .xjp-login-text input:-ms-input-placeholder {
      /* Internet Explorer 10-11 */
      font-size: .28rem;
      font-family: Arial;
      font-weight: bold;
      color: white;
      text-align: center; }
</code></pre>
<h2 id="title">title</h2>
<pre><code class="language-html">&lt;title&gt;PerpetualStar&lt;/title&gt;
</code></pre>
<h2 id="获取url参数">获取url参数</h2>
<pre><code class="language-js">/* 获取URL中的参数 */
function getUrlParam(name) {
    let reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;); //构造一个含有目标参数的正则表达式对象
    let r = window.location.search.substr(1).match(reg);  //匹配目标参数
    if (r != null) return unescape(r[2]);
    return null; //返回参数值
}

</code></pre>
<h2 id="input的内容验证数字邮箱">input的内容验证（数字，邮箱）</h2>
<pre><code class="language-html">&lt;input type=&quot;text&quot; placeholder=&quot;Enter your phone&quot; minlength=&quot;10&quot; maxlength=&quot;10&quot; required=&quot;&quot; onkeyup=&quot;if(this.value.length==1){this.value=this.value.replace(/[^1-9]/g,'')}else{this.value=this.value.replace(/\D/g,'')}&quot; onafterpaste=&quot;if(this.value.length==1){this.value=this.value.replace(/[^1-9]/g,'')}else{this.value=this.value.replace(/\D/g,'')}&quot;&gt;

</code></pre>
<pre><code class="language-js">$('input[type=number]').keypress(function(e) {
    if ((!String.fromCharCode(e.keyCode).match(/[0-9.]/))) {
        return false;
    }
});

$('input[type=number]')[0].oninput = function(e) {
    if (e.target.value.length &gt; 10) {
        e.target.value = e.target.value.slice(0, 10)
    }
}

//判断邮箱的正则
	let pattern = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    if (!pattern.test(email)) {
        popInfo('Please enter correct email information')
        return
     }
</code></pre>
<h2 id="ajax请求">ajax请求</h2>
<pre><code class="language-http">http://api.youbetterbuy.com
</code></pre>
<pre><code class="language-js">        $.post('http://api.youbetterbuy.com/api/consultaion/addConsultaionUser',params,function (res) {
            if(res.retCode === 0) {
                $.cookie('phonenum', phone, { expires: 7, path: '/' });
                closeShade()
                closeSign()
                ifCookieGetInfo()
                isDraw = false
            }else {
                if(res.message){
                    popInfo(res.message);

                }else {
                    popInfo('System Error.');
                }
                isDraw = false
            }
        })
</code></pre>
<h2 id="whats-up-随机取值">what's up 随机取值</h2>
<pre><code class="language-js">let halfUrl = 'http://yd2.xbetterbuy.com/wame.html?num='
let Arr = [&quot;+918732892814&quot;, &quot;+918939704559&quot;,
        &quot;+918939704535&quot;, &quot;+918939704614&quot;];
    let n = Math.floor(Math.random() * Arr.length + 1) - 1;
</code></pre>
<h2 id="条点验证码">条点验证码</h2>
<pre><code class="language-html">    &lt;script src=&quot;./js/captcha-mini.js&quot;&gt;&lt;/script&gt;
</code></pre>
<pre><code class="language-js">    
let captcha2 = new CaptchaMini({
        lineWidth: 1,   //线条宽度
        lineNum: 0,       //线条数量
        dotR: 2,          //点的半径
        dotNum: 25,       //点的数量
        preGroundColor: [10, 80],    //前景色区间
        backGroundColor: [150, 250], //背景色区间
        fontSize: 40,           //字体大小
        fontFamily: ['Georgia', '微软雅黑', 'Helvetica', 'Arial'],  //字体类型
        fontStyle: 'fill',      //字体绘制方法，有fill和stroke
        content: 'QWERTYUIOPASDFGHJKLZXCVBNM',  //验证码内容
        length: 6    //验证码长度
    });
    captcha2.draw(document.querySelector('#captcha2'), r =&gt; {
        codeImgCheckLogin = r
    });
</code></pre>
<h2 id="layui的提示消息">layUI的提示消息===============</h2>
<pre><code class="language-html">    &lt;script src=&quot;../public_package/layer/layer.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</code></pre>
<pre><code class="language-js">/*提示消息 */
function popInfo(str) {
    layer.open({
        content: str,
        skin: 'msg',
        time: 2
    });
}
</code></pre>
<h2 id="判断username只为数字字母空格下划线">判断username只为数字，字母，空格，下划线</h2>
<pre><code class="language-js">/*判断username只为数字，字母，空格，下划线*/
function  checkUsernaem( username, isSignup=true) {
    let usern = /^[a-zA-Z0-9_ ]{1,}$/;
    if (!usern.test(username)) {

        if(isSignup) {
            popTip(usernameErrorTip, 'red', true)
        }

        username.value = '';

        return

    }
}
</code></pre>
<h2 id="js获取前一个访问页面的url地址documentreferrer">JS获取前一个访问页面的URL地址document.referrer</h2>
<h2 id="让弹窗在页面中居中">让弹窗在页面中居中</h2>
<pre><code class="language-csss">  position: fixed;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
</code></pre>
<h2 id="meatvp">meat:vp</h2>
<pre><code class="language-html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;
</code></pre>
<h3 id="viewprot响应式外部设计学习">Viewprot：响应式外部设计学习</h3>
<ol>
<li>什么是Viewport？</li>
</ol>
<pre><code>viewport是用户网页的可是区域。翻译中文就是“视区”，手机浏览器是把页面放在一个虚拟的&quot;窗口&quot;（viewport）中，通常这个虚拟的&quot;窗口&quot;（viewport）比屏幕宽，这样就不用把每个网页挤到很小的窗口中（这样会破坏没有针对手机浏览器优化的网页的布局），用户可以通过平移和缩放来看网页的不同部分。
</code></pre>
<ol start="2">
<li>关于viewport的三个理论？</li>
</ol>
<ul>
<li>layout viewport（布局视区）：<br>
在移动端浏览器上面，视觉视区限制了布局视区，为了能在移动设备上正常显示那些为pc端浏览器设计的网站，移动设备上的浏览器都会把自己默认的 viewport 设为980px或其他值，一般都比移动端浏览器可视区域大很多，所以就会出现浏览器出现横向滚动条的情况 。布局视区的宽度是可以用 document.documentElement.clientWidth 来获取。</li>
</ul>
<ol start="3">
<li>
<p>visual viewport（视觉视区）：<br>
用户透过窗口可以看到的内容区域的大小，用户可以以滑动或者其他的方式来查看页面其他内容，通过 window.screen.width 来获取它的宽度，同样上一张偷来的图，帮助理解。</p>
</li>
<li>
<p>如何使用viewport</p>
</li>
</ol>
<ul>
<li>利用 meta 标签设置 viewport<br>
<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</code></li>
<li>各个属性的意思：</li>
</ul>
<pre><code>width：控制 viewport 的大小，可以指定的一个值，如 600，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。
height：和 width 相对应，指定高度。
initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。
minimum-scale：允许用户缩放到的最大比例。
maximum-scale：允许用户缩放到的最小比例。
user-scalable：用户是否可以手动缩放。
</code></pre>
<pre><code>设计图的宽度 = 设备宽度
假如 设计图的宽度为 375px，当然可以是其他的，这里是一个假如，如果是640，750就把375换成对应的数值按照以下方法换算就行就行
因为
    375px = 100vw
那么
    1px = 100 / 375 vw = 0.26666666666666666vw（约等于）

为了方便计算，放大一百倍，精确到6位，只能下取舍，因为上取舍，计算宽度的时候会大于页面宽度，从而出现滚动条
故：
    100px = 26.666666vw（约等于）

又因为给 html 标签设置 font-size 为 26.666666vw （约等于）

1rem为font-size的大小

所以：
    1rem = 100px
    0.2rem = 20px
也就是说：
    设计图上的 12px 换算成rem就是0.12rem，20px就写成0.2rem即可
</code></pre>
<h2 id="让字体颜色渐变">让字体颜色渐变</h2>
<pre><code class="language-css">    font-size: .32rem;
    font-family:Arial;
    font-weight:bold;
    color:rgba(0,0,0,1);

    background:linear-gradient(0deg,rgba(253,103,87,1) 0%, rgba(255,189,80,1) 100%);
    -webkit-background-clip:text;
    -webkit-text-fill-color:transparent;
</code></pre>
<h2 id="判断设备是什么硬件平台的">判断设备是什么硬件平台的</h2>
<pre><code class="language-js">//1.js判断是否为IOS设备
function  IsAppleStore()  {
            var  u  =  navigator.userAgent,
                 app  =  navigator.appVersion;        
            var  ios  =  !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/);        
            var  iPad  =  u.indexOf('iPad')  &gt;  -1;        
            var  iPhone  =  u.indexOf('iPhone')  &gt;  -1  ||  u.indexOf('Mac')  &gt;  -1;        
            if  (ios  ||  iPad  ||  iPhone)  {            
                return  true;        
            } 
            else  {            
                return  false;        
            }
        }
//1.js判断是否为Android设备
function IsAndroidList() {
            var u = navigator.userAgent;
            if (u.indexOf('Android') &gt; -1 || u.indexOf('Adr') &gt; -1) {
                return true
            } else {
                return false
            }
        }
//3.js判断是否是电脑端
function IsPC() {
    var userAgentInfo = navigator.userAgent;
    var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,
        &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,
        &quot;iPad&quot;, &quot;iPod&quot;];
    var flag = true;
    for (var v = 0; v &lt; Agents.length; v++) {
        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) {
            flag = false;
            break;
        }
    }
    return flag;
}
</code></pre>
<p>文本溢出换行</p>
<pre><code class="language-css">/*单行省略*/
overflow: hidden; //超出的文本隐藏
text-overflow: ellipsis; //溢出用省略号显示
white-space: nowrap; //溢出不换行

/*多行省略*/
word-wrap:break-word;         /* 内容存在英语或数字时强制换行 */
overflow: hidden;             /* 隐藏溢出部分 */
text-overflow: ellipsis;      /* 显示省略符号来代表被隐藏的文本 */
display: -webkit-box;         /* 将对象作为弹性伸缩盒子模型显示 */
-webkit-box-orient: vertical; /* 设置盒子内排列顺序为纵向 */
-webkit-line-clamp: 2;        /* 限制块元素显示的文本的行数 */
</code></pre>
<h2 id="修改html-webpack-plugin的值">修改html-webpack-plugin的值</h2>
<pre><code class="language-js">/**
 * @Description:    自定义配置
 * @Author:         txf
 * @CreateDate:     2020/5/7 13:28
 */
const path = require(&quot;path&quot;);
function resolve(dir) {
  return path.join(__dirname, dir);
}

module.exports = {
  publicPath: process.env.NODE_ENV === &quot;production&quot; ? &quot;/solar/&quot; : &quot;./&quot;,
  /* 输出文件目录：在npm run build时，生成文件的目录名称 */
  outputDir: &quot;dist&quot;,
  /* 放置生成的静态资源 (json、css、img、fonts) 的 (相对于 outputDir 的) 目录 */
  assetsDir: &quot;static&quot;,
  configureWebpack: {
    resolve: {
      alias: {
        &quot;@&quot;: resolve(&quot;src&quot;)
      }
    }
  },
  //修改或新增html-webpack-plugin的值，在index.html里面能读取htmlWebpackPlugin.options.title
  chainWebpack: config =&gt;{
    config.plugin('html')
      .tap(args =&gt; {
        args[0].title = &quot;平台&quot;;
        return args;
      })
  },
  /* 是否在构建生产包时生成 sourceMap 文件，false将提高构建速度 */
  productionSourceMap: false,
  lintOnSave: false,
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[番茄工作法]]></title>
        <id>https://DennyWanye.GitHub.io/post/fan-qie-gong-zuo-fa/</id>
        <link href="https://DennyWanye.GitHub.io/post/fan-qie-gong-zuo-fa/">
        </link>
        <updated>2022-03-09T10:45:58.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/594059/pexels-photo-594059.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;h=300" alt="" loading="lazy"></figure>
<h3 id="一-番茄工作法的工具">一、番茄工作法的工具：</h3>
<ol>
<li>
<p>一个计时工具</p>
</li>
<li>
<p>一张today's TODO List，包含以下内容：</p>
<p>2.1 小标题，包括时间、地点、人物</p>
<p>2.2 清单，包含今天要做的事情，先后顺序排列</p>
<p>2.3 计划外的紧急事件</p>
</li>
<li>
<p>activity inventory：</p>
<p>3.1 标题： 人物、事件</p>
<p>3.2 想要做什么的事情</p>
</li>
<li>
<p>一份记录表，用于记录原始数据。包含：数据、摘要、完成任务所需要的番茄钟时间。</p>
</li>
</ol>
<h3 id="二-法则">二、法则</h3>
<p>规则一： 一个番茄时间共30分钟 = 25分钟工作时间 + 5分钟休息时间</p>
<p>规则二： 一个番茄时间不可分割</p>
<p>规则三：每四个番茄时间后，停止你的工作，进行一次较长时间的休息，15~30分钟</p>
<p>规则四：完成一个任务，划掉一个任务</p>
<h3 id="三-番茄工作法流程">三、番茄工作法流程</h3>
<figure data-type="image" tabindex="2"><img src="https://DennyWanye.GitHub.io/post-images/1646822783978.png" alt="" loading="lazy"></figure>
<p>注意：</p>
<ol>
<li>弄清楚完成某项任务所需要的时间</li>
<li>减少被打断的次数</li>
<li>估测某项任务所需要的时间</li>
</ol>
<p><a href="https://alloyteam.github.io/AlloyTimer/">线上工具</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[EventLoop 和 执行栈]]></title>
        <id>https://DennyWanye.GitHub.io/post/eventloop-he-zhi-xing-zhan/</id>
        <link href="https://DennyWanye.GitHub.io/post/eventloop-he-zhi-xing-zhan/">
        </link>
        <updated>2022-03-03T15:55:06.000Z</updated>
        <content type="html"><![CDATA[<p>EventLoop</p>
<h3 id="1堆和栈">1.堆和栈</h3>
<p>堆（heap）：存放这对象</p>
<p>栈（stack）：存放着对象的指针以及一些基础变量类型</p>
<h3 id="2执行上下文栈execution-context-stack以下简称执行栈">2.执行上下文栈（Execution Context Stack），以下简称执行栈。</h3>
<p>可以把执行上下文栈认为是一个存储函数调用的栈结构，遵循先进后出的原则</p>
<h3 id="3执行上下文execution-context">3.执行上下文（Execution Context）</h3>
<p>3.1 概念：当你执行一个 函数 的时候，js会生成与之对应的执行环境（Execution Context），然后在这个执行环境中执行该 函数 ，当该 函数 执行完毕并返回结果后，js会退出这个执行环境，并把这个执行环境销毁。</p>
<p>3.2 类型：</p>
<ul>
<li>全局执行上下文： 这是默认的、最基础的执行上下文。不在任何函数中的代码都位于全局执行上下文中。它做了两件事：1. 创建一个全局对象，在浏览器中这个全局对象就是 window 对象。2. 将 this 指针指向这个全局对象。一个程序中只能存在一个全局执行上下文。</li>
<li>函数执行上下文： 每次调用函数时，都会为该函数创建一个新的执行上下文。每个函数都拥有自己的执行上下文，但是只有在函数被调用的时候才会被创建。一个程序中可以存在任意数量的函数执行上下文。每当一个新的执行上下文被创建，它都会按照特定的顺序执行一系列步骤，具体过程将在本文后面讨论。</li>
<li>Eval 函数执行上下文： 运行在 eval 函数中的代码也获得了自己的执行上下文，但由于 Javascript 开发人员不常用 eval 函数，所以在这里不再讨论。</li>
</ul>
<h3 id="4执行的过程同步任务">4.执行的过程（同步任务）</h3>
<ol>
<li>最开始浏览器执行全局代码的时候，将<strong>全局执行上下文</strong>压入（push）执行栈的底部。</li>
<li>每当执行一个函数的时候，就会创建该函数的<strong>执行上下文</strong>，并将它压入到执行栈的底部。当这个函数执行完毕并返回之后，删除（pop）该<strong>执行上下文</strong>，等待垃圾回收。</li>
<li>浏览器的JS执行引擎总是会访问执行栈顶部的执行上下文。</li>
<li>全局上下文只有一个，在浏览器关闭时出栈。</li>
</ol>
<h3 id="5关于异步任务">5.关于异步任务</h3>
<ol>
<li>
<p>js引擎遇见一个异步任务之后，并不会阻塞，而是将其挂起，继续执行后续的任务。</p>
</li>
<li>
<p>然后当异步任务返回结果，并需要执行callback函数的时候。js引擎会将该callback函数放入——事件队列中（Task Queue）</p>
</li>
<li>
<p>根据异步任务的不同，事件队列也划分成微任务（micro task）队列和宏任务（macro task）队列。</p>
</li>
<li>
<p>属于宏任务的：<code>setInterval()</code>、<code>setTimeout()</code></p>
</li>
<li>
<p>属于微任务的：<code>new Promise()</code>、<code>new MutaionObserver()</code></p>
</li>
<li>
<p>主进程的任务执行完成后，会先判断微任务队列是否为空，不为空，则执行其中任务，为空则判断宏任务队列是否为空，不为空则取出最前面的一个任务执行。执行完成后就重复以上操作。</p>
</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://DennyWanye.GitHub.io/post-images/1646323076324.gif" alt="" loading="lazy"></figure>
<pre><code class="language-js">   setTimeout(function () {
       console.log(1);
   });
   
   new Promise(function(resolve,reject){
       console.log(2)
       resolve(3)
   }).then(function(val){
       console.log(val);
   })
   
   //执行结果
   2
   3
   1
</code></pre>
<p><a href="https://segmentfault.com/a/1190000018550118">参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[flex布局的flex-grow、flex-shrink、flex-basis]]></title>
        <id>https://DennyWanye.GitHub.io/post/flex-bu-ju-de-flex-growflex-shrinkflex-basis/</id>
        <link href="https://DennyWanye.GitHub.io/post/flex-bu-ju-de-flex-growflex-shrinkflex-basis/">
        </link>
        <updated>2022-02-24T07:43:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="flex-basis-用于设置子元素占用的空间">flex-basis： 用于设置子元素占用的空间。</h3>
<ol>
<li>如果设置为 <code>flex-basis: auto;</code>，子项的宽度由其 <code>width</code>数值决定，如果宽度为 <code>auto</code>，则由其内容撑起的宽度决定。</li>
<li>如果设置为 <code>flex-basis: 700px;</code>，则子项的宽度会被覆盖为<code>700px</code>。</li>
</ol>
<h3 id="flex-grow用来瓜分父项的剩余空间">flex-grow：用来“瓜分”父项的“剩余空间”。</h3>
<p>根据每个子项<code>flex-grow</code> 的值，来“瓜分”父项的剩余空间。</p>
<p>例子：</p>
<pre><code class="language-css">.father{
    width: 500px;
    height: 30px;
    display: flex;
    background-color: #eee;
}

.children-1 {
    width: 100px;
    background-color: pink;
}

.children-2 {
    width: 100px;
    flex-grow: 1;
    background-color: blue;
}

.children-3 {
    width: 100px;
    flex-grow: 3;
    background-color: red;
}
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;father&quot;&gt;
  &lt;div class=&quot;children-1&quot;&gt;1&lt;/div&gt;
  &lt;div class=&quot;children-2&quot;&gt;2&lt;/div&gt;
  &lt;div class=&quot;children-3&quot;&gt;3&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<ol>
<li>默认为0，即不参与瓜分</li>
<li>瓜分的份数 = 每个子项<code>flex-grow</code>的数量之和</li>
<li>瓜分的宽度 = 父项未分配出去的宽度，此时为 500 - 300 = 200px</li>
<li>每个子项瓜分到的宽度 = 瓜分的宽度 / 瓜分的份数 * 子项 <code>flex-grow</code>的数量</li>
</ol>
<h3 id="flex-shrink用来吸收超出的空间">flex-shrink用来“吸收”超出的空间</h3>
<pre><code class="language-css">.father{
    width: 500px;
    height: 30px;
    display: flex;
    background-color: #eee;
}

.children-1 {
    width: 300px;
    flex-basis: 400px;
    background-color: pink;
}

.children-2 {
    width: 100px;
    flex-basis: 200px;
    background-color: blue;
    flex-shrink: 1;
}

.children-3 {
    width: 100px;
    flex-basis: auto;
    background-color: red;
    flex-shrink: 2;
}
</code></pre>
<p>因为<code>flex-basis: 400px</code>覆盖了原本设置的宽度，所以<code>children-1</code>的宽度为 400px。</p>
<p>同理<code>children-2</code>的宽度为200px。</p>
<p>因为<code>flex-basis: auto</code>，所以<code>children-3</code>的宽度为<code>width</code>的宽度，即是100px。</p>
<ol>
<li>超出的宽度为<code>200px</code></li>
<li>因为<code>flex-shrink</code>默认值为1，所以子项的<code>flex-shrink</code>值总和为 4。</li>
<li>每个子项所减少的宽度 = 200px / 4 * 每个子项的<code>flex-shrink</code>的值。</li>
</ol>
<p>[原教程链接](flex-basis： 用于设置子元素占用的空间。</p>
<ol>
<li>如果设置为 <code>flex-basis: auto;</code>，子项的宽度由其 <code>width</code>数值决定，如果宽度为 <code>auto</code>，则由其内容撑起的宽度决定。</li>
<li>如果设置为 <code>flex-basis: 700px;</code>，则子项的宽度会被覆盖为<code>700px</code>。</li>
</ol>
<h3 id="flex-grow用来瓜分父项的剩余空间-2">flex-grow：用来“瓜分”父项的“剩余空间”。</h3>
<p>根据每个子项<code>flex-grow</code> 的值，来“瓜分”父项的剩余空间。</p>
<p>例子：</p>
<pre><code class="language-css">.father{
    width: 500px;
    height: 30px;
    display: flex;
    background-color: #eee;
}

.children-1 {
    width: 100px;
    background-color: pink;
}

.children-2 {
    width: 100px;
    flex-grow: 1;
    background-color: blue;
}

.children-3 {
    width: 100px;
    flex-grow: 3;
    background-color: red;
}
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;father&quot;&gt;
  &lt;div class=&quot;children-1&quot;&gt;1&lt;/div&gt;
  &lt;div class=&quot;children-2&quot;&gt;2&lt;/div&gt;
  &lt;div class=&quot;children-3&quot;&gt;3&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<ol>
<li>默认为0，即不参与瓜分</li>
<li>瓜分的份数 = 每个子项<code>flex-grow</code>的数量之和</li>
<li>瓜分的宽度 = 父项未分配出去的宽度，此时为 500 - 300 = 200px</li>
<li>每个子项瓜分到的宽度 = 瓜分的宽度 / 瓜分的份数 * 子项 <code>flex-grow</code>的数量</li>
</ol>
<h3 id="flex-shrink用来吸收超出的空间-2">flex-shrink用来“吸收”超出的空间</h3>
<pre><code class="language-css">.father{
    width: 500px;
    height: 30px;
    display: flex;
    background-color: #eee;
}

.children-1 {
    width: 300px;
    flex-basis: 400px;
    background-color: pink;
}

.children-2 {
    width: 100px;
    flex-basis: 200px;
    background-color: blue;
    flex-shrink: 1;
}

.children-3 {
    width: 100px;
    flex-basis: auto;
    background-color: red;
    flex-shrink: 2;
}
</code></pre>
<p>因为<code>flex-basis: 400px</code>覆盖了原本设置的宽度，所以<code>children-1</code>的宽度为 400px。</p>
<p>同理<code>children-2</code>的宽度为200px。</p>
<p>因为<code>flex-basis: auto</code>，所以<code>children-3</code>的宽度为<code>width</code>的宽度，即是100px。</p>
<ol>
<li>
<p>超出的宽度为<code>200px</code></p>
</li>
<li>
<p>因为<code>flex-shrink</code>默认值为1，所以子项的<code>flex-shrink</code>值总和为 4。</p>
</li>
<li>
<p>每个子项所减少的宽度 = 200px / 4 * 每个子项的<code>flex-shrink</code>的值</p>
</li>
</ol>
<p><a href="https://zhuanlan.zhihu.com/p/39052660"><code>原教程链接</code></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[体内平衡机制]]></title>
        <id>https://DennyWanye.GitHub.io/post/ti-nei-ping-heng-ji-zhi/</id>
        <link href="https://DennyWanye.GitHub.io/post/ti-nei-ping-heng-ji-zhi/">
        </link>
        <updated>2022-02-23T15:25:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/3059750/pexels-photo-3059750.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=300" alt="" loading="lazy"></figure>
<h3 id="1-原理">1. 原理：</h3>
<p>我们大脑产生快感和痛感的区域是重叠的，每一次因为多巴胺产生的快感，身体会用自动用一定的痛感来平衡它。在生理学叫做体内平衡。</p>
<p>也就是当你通过行动A产生快感后，体内平衡机制会让你产生以下情况，也即是痛感：</p>
<ol>
<li>渴望更多</li>
<li>负面的情绪</li>
<li>降低行动A产生的快感强度</li>
</ol>
<p><strong>如果我们什么都不做，体内平衡会恢复到某种平衡状态。</strong></p>
<p>例子：吸毒，当你吸毒后，会产生巨大的快感。之后会让你想要更多，以及当长时间不吸毒后的戒断反应。戒断反应就是平衡机制产生的痛感（焦虑、烦躁的情绪等）。无限循环之后，产生的痛感就会长时间存在，而吸毒（同样数量和品质的）产生的快感会降低。所以个体就会追求更加刺激的毒品。而当该个体想要戒毒的时候，产生的戒断反应就是痛感的极端表达。</p>
<p>人体内部存在一种平衡，这种平衡起到调节生物体快感和痛感的作用。具体的机制就是：当你做一件事情感觉到快感的之后，体内平衡机制就会产生相应比例（比例是多少呢？）的痛感。反之，当你做一件事情感受到痛感的之后，体内平衡机制就会产生相应比例的快感。</p>
<h3 id="2这是一种人体的机制生物体的机制">2.这是一种人体的机制（生物体的机制？）</h3>
<h4 id="21-机制的边界情况">2.1 机制的边界情况</h4>
<h5 id="211多巴胺枯竭">2.1.1多巴胺枯竭</h5>
<p>如果不断的追求快感，就会进入一种<strong>多巴胺枯竭</strong>的状态。从而很难去做一件困难的事情。</p>
<p>例如：如果你早上醒了一直刷抖音，就会很难起床。</p>
<h5 id="212-体内平衡的机制被打破">2.1.2 体内平衡的机制被打破</h5>
<p>就像刚刚说的吸毒，当体内平衡机制被打破时，新的平衡会建立。个体感受到快感的阙值会上升。感受到痛感的阙值会下降。反之如果你一直追求痛感（假设），新的机制平衡建立后，痛感的阙值会上升，快感的阙值会下降。</p>
<p>阙值被打破的条件：（主动或者被动）一直感受到超出体内平衡机制平衡点的快感或痛感，当个体习惯（笼统的说法）了之后，新的平衡被建立。</p>
<h3 id="3如何利用机制">3.如何利用机制</h3>
<h4 id="31-追求痛苦">3.1 追求痛苦</h4>
<p>要点：主动做一些会产生痛感的事情，之后根据机制，身体会产生快感。此时，产生的痛感不仅不会产生焦虑，还会缓解焦虑。会产生多巴胺和内啡肽（止痛）产生快感。</p>
<h4 id="32-控制快感和痛感的获取">3.2 控制快感和痛感的获取</h4>
<figure data-type="image" tabindex="2"><img src="https://DennyWanye.GitHub.io/post-images/1645630748810.png" alt="" loading="lazy"></figure>
<p>上面一张图为做事情产生的多巴胺数量，喝一杯咖啡为130，最后一项吸食冰毒为1300。红线以下为会破坏机制平衡的。</p>
<p>管理好每天做<strong>高快感</strong>事情的时间。上图中红线以上的就是正常生活中高多巴胺的行为。如果个体在一天中先做高多巴胺的行为，该个体在之后的一段时间内，就会面临痛感的负面状态（焦虑，烦躁等甚至是多巴胺枯竭），导致很难甚至没有办法完成一些需要去处理且有痛感的事情。</p>
<p>所以，可以先做需要处理且有痛感的事情，之后的时间内因为我们先做了有痛感的事情，我们会得到机制反馈的且能缓解焦虑的快感。</p>
<h4 id="33-降低快感的预期">3.3 降低快感的预期</h4>
<p>例子：还记得条件反射的实验吗？就是摇铃铛，就给狗子食物吃。实验者最后只是摇铃铛狗都会流出口水。</p>
<p>这就是预期带来的快感，这种快感是没有实际利益的。狗子并没有得到食物，只是听到了铃铛的声音。</p>
<p>所以可以通过降低快感的预期，也即是降低预期带来的快感，从而降低快感的获取。</p>
<h4 id="奖励预判误差">奖励预判误差</h4>
<figure data-type="image" tabindex="3"><img src="https://DennyWanye.GitHub.io/post-images/1645630911213.png" alt="" loading="lazy"></figure>
<p>做可以获得快感的行为A，仅仅只是将成功的概率调整到50%，多巴胺即会在行动过程中上升到一个很大的水平，也是赌博之所以吸引力的原因。</p>
<p>所以尽量不要去碰这种涉及到奖励预判误差。</p>
<h4 id="34延迟消费多巴胺">3.4延迟消费多巴胺</h4>
<p>当个体被身体驱动去做一些高快感的事情A时，可以通过正念冥想（方法的一种）来暂时放置去做事情A的冲动。</p>
<p>例子：当你在减肥时，睡觉前饿的受不了，非常想要吃东西。可以进行正念冥想，来暂时放置这种想要吃东西的冲动。等待这种冲动慢慢消失。</p>
<p>多巴胺是我们人类寻找未来资源的货币，我们只有认识并管理它，才不会过度消费这个货币。   ————Andrew Huberman</p>
<p><a href="https://www.zhihu.com/zvideo/1458376222892285952">原视频地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactDnd插件使用]]></title>
        <id>https://DennyWanye.GitHub.io/post/reactdnd-cha-jian-shi-yong/</id>
        <link href="https://DennyWanye.GitHub.io/post/reactdnd-cha-jian-shi-yong/">
        </link>
        <updated>2022-02-16T07:29:53.000Z</updated>
        <content type="html"><![CDATA[<p>### <strong>一个用ReactDnd库做的一个Demo</strong></p>
<p>主要用到的两个方法：<code>DropTarget</code> <code>DragSource</code></p>
<p>Example.js:</p>
<pre><code class="language-jsx">import Container from './Container';
import { DndProvider } from &quot;react-dnd&quot;;
import { HTML5Backend } from &quot;react-dnd-html5-backend&quot;;

export const Example = () =&gt; {
    return (&lt;DndProvider backend={ HTML5Backend }&gt;
        &lt;Container /&gt;
    &lt;/DndProvider&gt;);
};

</code></pre>
<p>Container.js:</p>
<pre><code class="language-jsx">import React, { PureComponent } from 'react'
import TabItem from &quot;./TabItem&quot;;

export default class Container extends PureComponent{

    constructor(props) {
        super(props)
        this.state = {
            tabs: [1,2,3,4,5,6,7,8,9,10],
        }
    }

    changeTabLocation = (index, targetIndex) =&gt; {
        if(this.state.tabs) {
            const tabs = this.state.tabs
            let temp = tabs[index]
            tabs[index] = tabs[targetIndex]
            tabs[targetIndex] = temp
            this.setState(tabs)
        }
    }

    renderTabs() {
        return &lt;TabItem tabs={this.state.tabs} changeTabLocation={this.changeTabLocation.bind(this)} /&gt;
    }

    render() {
        return (&lt;div className=&quot;container&quot;&gt;
            {this.renderTabs()}
        &lt;/div&gt;)
    }
}

</code></pre>
<p>TabItem.js:</p>
<pre><code class="language-jsx">import React, { PureComponent } from 'react'
import { DragSource, DropTarget } from 'react-dnd'
import { ItemTypes } from './ItemTypes.js'



class ItemCom extends PureComponent {
    constructor(props) {
        super(props);
    }

    render(){
        const { content, connectDropTarget, connectDragSource, isDragging } = this.props
        const opacity = isDragging ? 0 : 1
        return connectDropTarget(connectDragSource(&lt;div style={{ opacity }} className=&quot;tab-item&quot;&gt;{content}&lt;/div&gt;))
    }
}

const dropTarget = DropTarget(ItemTypes.TAB, {
    drop(props, monitor, component) {
        if(props.index != monitor.getItem().index) {
            props.changeTabLocation(props.index, monitor.getItem().index)
        }
        console.log(props)
        console.log(monitor.getItem())
    },
},(connect)=&gt; ({
    connectDropTarget: connect.dropTarget(),
}))(ItemCom)

const DargSourceDom = DragSource( ItemTypes.TAB, {
        beginDrag(props) {
            const { content, index } = props;
            return { content, index };
        },
    }, (connect, monitor) =&gt; ({
        connectDragSource: connect.dragSource(),
        isDragging: monitor.isDragging(),
    })
)(dropTarget)


const TabItem = ({ tabs, changeTabLocation}) =&gt; {
    return &lt;div&gt;
        {
            tabs.map((item,index)=&gt; {
                return &lt;DargSourceDom index={index} changeTabLocation={changeTabLocation}  content={item}/&gt;
            })
        }
    &lt;/div&gt;
}

export default TabItem

</code></pre>
<ol>
<li>
<p>在 <code>DropTarget</code> 中对于 <code>drop</code> 的处理</p>
</li>
<li>
<p>对于 <code>DropTarget</code> <code>DragSource</code> 所做的包裹处理。</p>
<p>这两个方法第三个参数都是传到 <code>ItemCom</code> 中的  <code>props</code> 中。</p>
<p>​	关于 <code>monitor</code> 中可以监听到的状态 这里有详细的介绍 <a href="https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor">DragSourceMonitor</a> <a href="https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor">DropTargetMonitor</a> 。</p>
</li>
<li>
<p>添加  CustomDragLayer</p>
<p>3.1 添加 CunstomDragLayer</p>
<pre><code class="language-jsx">import Container from './Container';
import CustomDragLayer from './CustomDragLayer';
import { DndProvider } from &quot;react-dnd&quot;;
import {HTML5Backend} from &quot;react-dnd-html5-backend&quot;;

export const Example = () =&gt; {
    return (&lt;DndProvider backend={ HTML5Backend }&gt;
			&lt;Container /&gt;
			&lt;CustomDragLayer /&gt;
		&lt;/DndProvider&gt;);
};

</code></pre>
<p>CustomDragLayer.js</p>
<pre><code class="language-jsx">import { DragLayer } from 'react-dnd';
import { ItemTypes } from './ItemTypes';
import { BoxDragPreview } from './BoxDragPreview';
const layerStyles = {
    position: 'fixed',
    pointerEvents: 'none',
    zIndex: 100,
    left: 0,
    top: 0,
    width: '100%',
    height: '100%',
};
function getItemStyles (props) {
    const { initialOffset, currentOffset } = props
    if (!initialOffset || !currentOffset) {
        return {
            display: 'none'
        }
    }

    let { x, y } = currentOffset
    y = initialOffset.y

    const transform = `translate(${x}px, ${y}px)`
    return {
        transform: transform,
        WebkitTransform: transform
    }
}
const CustomDragLayer = (props) =&gt; {
    const { item, itemType, isDragging } = props;
    function renderItem() {
        switch (itemType) {
            case ItemTypes.BOX:
                return &lt;BoxDragPreview title={item.title}/&gt;;
            default:
                return null;
        }
    }
    if (!isDragging) {
        return null;
    }
    return (&lt;div style={layerStyles}&gt;
			&lt;div style={getItemStyles(props)}&gt;{renderItem()}&lt;/div&gt;
		&lt;/div&gt;);
};
export default DragLayer((monitor,props) =&gt; {
    return ({
        item: monitor.getItem(),
        itemType: monitor.getItemType(),
        initialOffset: monitor.getInitialSourceClientOffset(),
        currentOffset: monitor.getSourceClientOffset(),
        isDragging: monitor.isDragging(),
    })
})(CustomDragLayer);

</code></pre>
<p>3.2 隐藏原生的拖动动画</p>
<pre><code class="language-jsx">import { PureComponent } from 'react';
import { DragSource } from 'react-dnd';
import { getEmptyImage } from 'react-dnd-html5-backend';
import { ItemTypes } from './ItemTypes';
import { Box } from './Box';
function getStyles(props) {
    const { left, top, isDragging } = props;
    const transform = `translate3d(${left}px, ${top}px, 0)`;
    return {
        position: 'absolute',
        transform,
        WebkitTransform: transform,
        // IE fallback: hide the real node using CSS when dragging
        // because IE will ignore our custom &quot;empty image&quot; drag preview.
        opacity: isDragging ? 0 : 1,
        height: isDragging ? 0 : '',
    };
}
class DraggableBox extends PureComponent {
    componentDidMount() {
        const { connectDragPreview } = this.props;
        if (connectDragPreview) {
            // Use empty image as a drag preview so browsers don't draw it
            // and we can draw whatever we want on the custom drag layer instead.
            connectDragPreview(getEmptyImage(), {
                // IE fallback: specify that we'd rather screenshot the node
                // when it already knows it's being dragged so we can hide it with CSS.
                captureDraggingState: true,
            });
        }
    }
    render() {
        const { title, connectDragSource } = this.props;
        return connectDragSource(&lt;div style={getStyles(this.props)} role=&quot;DraggableBox&quot;&gt;
				&lt;Box title={title}/&gt;
			&lt;/div&gt;);
    }
}
export default DragSource(ItemTypes.BOX, {
    beginDrag(props) {
        const { id, title, left, top } = props;
        return { id, title, left, top };
    },
}, (connect, monitor) =&gt; ({
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging(),
}))(DraggableBox);

</code></pre>
<p>3.3 这种CustomDragLayer的核心方法就是 CustomDragLayer.js中的 <code>getItemStyles</code>:</p>
<pre><code class="language-jsx">function getItemStyles (props) {
    const { initialOffset, currentOffset } = props
    if (!initialOffset || !currentOffset) {
        return {
            display: 'none'
        }
    }

    let { x, y } = currentOffset
    y = initialOffset.y

    //这里的 x y 坐标就是计算出来的 定制化拖动对象坐标
    const transform = `translate(${x}px, ${y}px)`
    return {
        transform: transform,
        WebkitTransform: transform
    }
}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React.memo()]]></title>
        <id>https://DennyWanye.GitHub.io/post/reactmemo/</id>
        <link href="https://DennyWanye.GitHub.io/post/reactmemo/">
        </link>
        <updated>2022-02-15T04:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1怎么使用">1.怎么使用</h3>
<p>React.memo 是用来决定在何种条件改变下，组件重新渲染。可以减少一次渲染中组件渲染的数量，从而提升用户体验。</p>
<pre><code class="language-javascript">React.memo(MyComponent, areEqual)

function areEqual () {
    /*
  return true if passing nextProps to render would return
  the same result as passing prevProps to render,
  otherwise return false
  */
}
</code></pre>
<p>MyComponent: 代表的是你需要包裹的组件。</p>
<p>areEqual： 是可选项，判断是否进行渲染的函数，返回值为布尔值。</p>
<h3 id="2注意项">2.注意项</h3>
<p>2.1 当areEqual没有传入的时候，其是比较组件的 props ，来判断组件是否变更，如果变更就进行重新渲染，如果没有就不对该组件进行渲染。</p>
<p>2.2 React.memo的作用原理是判断props是否发生改变（或者是传入的areEqual函数返回的布尔值），如果是true，就重新渲染组件，反之不做其他操作。如果你的组件中有用到 <a href="https://reactjs.org/docs/hooks-state.html"><code>useState</code></a>, <a href="https://reactjs.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a> 或者 <a href="https://reactjs.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a> Hook的话，当state或者context改变的时候，该组件还是会更新。</p>
<p>2.3 当你向被memo包裹的组件传入回调函数的时候，在每一次渲染时，父组件都会提供一个不同的函数实例，这也就导致此时即使你的其他props数据都相同，但是因为传入的回调函数实例不同，导致每次渲染都会刷新该组件。</p>
<p>原因：</p>
<pre><code class="language-javascript">function sumNumber() {
    return (a, b) =&gt; a + b
}

const sum1 = sumNumber()
const sum2 = sumNumber()

console.log(sum1 === sum1)  //=&gt; true
console.log(sum2 === sum2)  //=&gt; true
console.log(sum1 === sum2)  //=&gt; false
</code></pre>
<p>此时我们可以用 <a href="https://reactjs.org/docs/hooks-reference.html#usecallback"><code>useCallback</code></a>来解决</p>
<pre><code class="language-javascript">const MemoizedLogout = React.memo(Logout);
function MyApp({ store, cookies }) {
  const onLogout = useCallback(
    () =&gt; cookies.clear('session'), 
    [cookies]
  );
  return (
    &lt;div className=&quot;main&quot;&gt;
      &lt;header&gt;
        &lt;MemoizedLogout
          username={store.username}
          onLogout={onLogout}
        /&gt;
      &lt;/header&gt;
      {store.content}
    &lt;/div&gt;
  );
}
</code></pre>
<p>###3.何时使用React.memo</p>
<p>3.1 &quot;Performance-related changes applied incorrectly can even harm performance. Use React.memo() wisely.&quot;</p>
<p>可使用规则： 如果你不能确认性能提升的多少，就不要使用React.memo</p>
<p>3.2 &quot;Performance-related changes applied incorrectly can even harm performance. Use React.memo() wisely.&quot;</p>
<p>一般来说，对于类组件，不建议使用React.memo()。类组件可以使用<code>shouldComponentUpdate()</code>方法，或者对 <code>PureComponent</code> 类组件进行扩展。</p>
<p>3.3 小心无用的比较</p>
<p><code>React.memo</code> 总是执行两件事：</p>
<ol>
<li>调用比较函数，来确认props是否发生改变</li>
<li>如果发生了改变就渲染更新该组件，没有就不做渲染<br>
所以当你在错误的地方调用了 <code>React.memo</code> 的时候，也就会错误的调用比较函数，造成性能的浪费。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[费曼学习法]]></title>
        <id>https://DennyWanye.GitHub.io/post/fei-man-xue-xi-fa/</id>
        <link href="https://DennyWanye.GitHub.io/post/fei-man-xue-xi-fa/">
        </link>
        <updated>2022-02-15T03:01:41.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/3772712/pexels-photo-3772712.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;w=1920" alt="" loading="lazy"></figure>
<h3 id="1确定目标">1.确定目标</h3>
<p>确认自己对这个目标是否有强烈的动机</p>
<h3 id="2模拟教学">2.模拟教学</h3>
<p><strong>通过教授他人，教授者对于知识的吸收率达到了90%。</strong></p>
<p>我们可以在博客中写文章，模拟自己教授他人的情况，来近似达到这一目的（存疑？）</p>
<figure data-type="image" tabindex="2"><img src="https://DennyWanye.GitHub.io/post-images/1644895331651.png" alt="" loading="lazy"></figure>
<p>注意：学习金字塔不一定是科学的，现在它的出处也无从考究，但它的理念很有启发性。</p>
<h3 id="3重复回顾">3.重复回顾</h3>
<p>在上述的两个过程中，会产生新的目标（也就是新的问题、发现新的知识盲区等等），此时我们就需要重复上述的步骤，来解决新的目标——通过查找各种资料，将新的目标解决，然后将解决的过程记录并背下来，讲给想象中的小白听，在博客上就是将解决目标的过程梳理成教程记录下来。</p>
<p><strong>注意：重点是需要用自己思考之后的语言表达出来。</strong></p>
<h3 id="4概念简化">4.概念简化</h3>
<p>费曼老爷子有一句很经典的话「If I couldn’t reduce it to the freshman level. That means we really don’t understand it.」</p>
<p>将知晓的概念简化，</p>
<p><strong>是用更简单的概念来表达，而不是用更少的语言来表达</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rule for coding]]></title>
        <id>https://DennyWanye.GitHub.io/post/rule-for-coding/</id>
        <link href="https://DennyWanye.GitHub.io/post/rule-for-coding/">
        </link>
        <updated>2022-02-14T10:17:46.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/7092371/pexels-photo-7092371.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=1920" alt="" loading="lazy"></figure>
<p><strong>If a component doesn't need some data for rendering, it doesn't need that data at all.</strong></p>
<p><strong>think more, and do less.</strong></p>
<p><strong>Use reverse thinking.</strong></p>
]]></content>
    </entry>
</feed>
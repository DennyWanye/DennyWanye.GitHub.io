<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://DennyWanye.GitHub.io</id>
    <title>DennyWanye</title>
    <updated>2022-02-23T15:42:20.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://DennyWanye.GitHub.io"/>
    <link rel="self" href="https://DennyWanye.GitHub.io/atom.xml"/>
    <subtitle>Keep track of interesting things</subtitle>
    <logo>https://DennyWanye.GitHub.io/images/avatar.png</logo>
    <icon>https://DennyWanye.GitHub.io/favicon.ico</icon>
    <rights>All rights reserved 2022, DennyWanye</rights>
    <entry>
        <title type="html"><![CDATA[体内平衡机制]]></title>
        <id>https://DennyWanye.GitHub.io/post/ti-nei-ping-heng-ji-zhi/</id>
        <link href="https://DennyWanye.GitHub.io/post/ti-nei-ping-heng-ji-zhi/">
        </link>
        <updated>2022-02-23T15:25:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/3059750/pexels-photo-3059750.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=300" alt="" loading="lazy"></figure>
<h3 id="1-原理">1. 原理：</h3>
<p>我们大脑产生快感和痛感的区域是重叠的，每一次因为多巴胺产生的快感，身体会用自动用一定的痛感来平衡它。在生理学叫做体内平衡。</p>
<p>也就是当你通过行动A产生快感后，体内平衡机制会让你产生以下情况，也即是痛感：</p>
<ol>
<li>渴望更多</li>
<li>负面的情绪</li>
<li>降低行动A产生的快感强度</li>
</ol>
<p><strong>如果我们什么都不做，体内平衡会恢复到某种平衡状态。</strong></p>
<p>例子：吸毒，当你吸毒后，会产生巨大的快感。之后会让你想要更多，以及当长时间不吸毒后的戒断反应。戒断反应就是平衡机制产生的痛感（焦虑、烦躁的情绪等）。无限循环之后，产生的痛感就会长时间存在，而吸毒（同样数量和品质的）产生的快感会降低。所以个体就会追求更加刺激的毒品。而当该个体想要戒毒的时候，产生的戒断反应就是痛感的极端表达。</p>
<p>人体内部存在一种平衡，这种平衡起到调节生物体快感和痛感的作用。具体的机制就是：当你做一件事情感觉到快感的之后，体内平衡机制就会产生相应比例（比例是多少呢？）的痛感。反之，当你做一件事情感受到痛感的之后，体内平衡机制就会产生相应比例的快感。</p>
<h3 id="2这是一种人体的机制生物体的机制">2.这是一种人体的机制（生物体的机制？）</h3>
<h4 id="21-机制的边界情况">2.1 机制的边界情况</h4>
<h5 id="211多巴胺枯竭">2.1.1多巴胺枯竭</h5>
<p>如果不断的追求快感，就会进入一种<strong>多巴胺枯竭</strong>的状态。从而很难去做一件困难的事情。</p>
<p>例如：如果你早上醒了一直刷抖音，就会很难起床。</p>
<h5 id="212-体内平衡的机制被打破">2.1.2 体内平衡的机制被打破</h5>
<p>就像刚刚说的吸毒，当体内平衡机制被打破时，新的平衡会建立。个体感受到快感的阙值会上升。感受到痛感的阙值会下降。反之如果你一直追求痛感（假设），新的机制平衡建立后，痛感的阙值会上升，快感的阙值会下降。</p>
<p>阙值被打破的条件：（主动或者被动）一直感受到超出体内平衡机制平衡点的快感或痛感，当个体习惯（笼统的说法）了之后，新的平衡被建立。</p>
<h3 id="3如何利用机制">3.如何利用机制</h3>
<h4 id="31-追求痛苦">3.1 追求痛苦</h4>
<p>要点：主动做一些会产生痛感的事情，之后根据机制，身体会产生快感。此时，产生的痛感不仅不会产生焦虑，还会缓解焦虑。会产生多巴胺和内啡肽（止痛）产生快感。</p>
<h4 id="32-控制快感和痛感的获取">3.2 控制快感和痛感的获取</h4>
<figure data-type="image" tabindex="2"><img src="https://DennyWanye.GitHub.io/post-images/1645630748810.png" alt="" loading="lazy"></figure>
<p>上面一张图为做事情产生的多巴胺数量，喝一杯咖啡为130，最后一项吸食冰毒为1300。红线以下为会破坏机制平衡的。</p>
<p>管理好每天做<strong>高快感</strong>事情的时间。上图中红线以上的就是正常生活中高多巴胺的行为。如果个体在一天中先做高多巴胺的行为，该个体在之后的一段时间内，就会面临痛感的负面状态（焦虑，烦躁等甚至是多巴胺枯竭），导致很难甚至没有办法完成一些需要去处理且有痛感的事情。</p>
<p>所以，可以先做需要处理且有痛感的事情，之后的时间内因为我们先做了有痛感的事情，我们会得到机制反馈的且能缓解焦虑的快感。</p>
<h4 id="33-降低快感的预期">3.3 降低快感的预期</h4>
<p>例子：还记得条件反射的实验吗？就是摇铃铛，就给狗子食物吃。实验者最后只是摇铃铛狗都会流出口水。</p>
<p>这就是预期带来的快感，这种快感是没有实际利益的。狗子并没有得到食物，只是听到了铃铛的声音。</p>
<p>所以可以通过降低快感的预期，也即是降低预期带来的快感，从而降低快感的获取。</p>
<h4 id="奖励预判误差">奖励预判误差</h4>
<figure data-type="image" tabindex="3"><img src="https://DennyWanye.GitHub.io/post-images/1645630911213.png" alt="" loading="lazy"></figure>
<p>做可以获得快感的行为A，仅仅只是将成功的概率调整到50%，多巴胺即会在行动过程中上升到一个很大的水平，也是赌博之所以吸引力的原因。</p>
<p>所以尽量不要去碰这种涉及到奖励预判误差。</p>
<h4 id="34延迟消费多巴胺">3.4延迟消费多巴胺</h4>
<p>当个体被身体驱动去做一些高快感的事情A时，可以通过正念冥想（方法的一种）来暂时放置去做事情A的冲动。</p>
<p>例子：当你在减肥时，睡觉前饿的受不了，非常想要吃东西。可以进行正念冥想，来暂时放置这种想要吃东西的冲动。等待这种冲动慢慢消失。</p>
<p>多巴胺是我们人类寻找未来资源的货币，我们只有认识并管理它，才不会过度消费这个货币。   ————Andrew Huberman</p>
<p><a href="https://www.zhihu.com/zvideo/1458376222892285952">原视频地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactDnd插件使用]]></title>
        <id>https://DennyWanye.GitHub.io/post/reactdnd-cha-jian-shi-yong/</id>
        <link href="https://DennyWanye.GitHub.io/post/reactdnd-cha-jian-shi-yong/">
        </link>
        <updated>2022-02-16T07:29:53.000Z</updated>
        <content type="html"><![CDATA[<p>### <strong>一个用ReactDnd库做的一个Demo</strong></p>
<p>主要用到的两个方法：<code>DropTarget</code> <code>DragSource</code></p>
<p>Example.js:</p>
<pre><code class="language-jsx">import Container from './Container';
import { DndProvider } from &quot;react-dnd&quot;;
import { HTML5Backend } from &quot;react-dnd-html5-backend&quot;;

export const Example = () =&gt; {
    return (&lt;DndProvider backend={ HTML5Backend }&gt;
        &lt;Container /&gt;
    &lt;/DndProvider&gt;);
};

</code></pre>
<p>Container.js:</p>
<pre><code class="language-jsx">import React, { PureComponent } from 'react'
import TabItem from &quot;./TabItem&quot;;

export default class Container extends PureComponent{

    constructor(props) {
        super(props)
        this.state = {
            tabs: [1,2,3,4,5,6,7,8,9,10],
        }
    }

    changeTabLocation = (index, targetIndex) =&gt; {
        if(this.state.tabs) {
            const tabs = this.state.tabs
            let temp = tabs[index]
            tabs[index] = tabs[targetIndex]
            tabs[targetIndex] = temp
            this.setState(tabs)
        }
    }

    renderTabs() {
        return &lt;TabItem tabs={this.state.tabs} changeTabLocation={this.changeTabLocation.bind(this)} /&gt;
    }

    render() {
        return (&lt;div className=&quot;container&quot;&gt;
            {this.renderTabs()}
        &lt;/div&gt;)
    }
}

</code></pre>
<p>TabItem.js:</p>
<pre><code class="language-jsx">import React, { PureComponent } from 'react'
import { DragSource, DropTarget } from 'react-dnd'
import { ItemTypes } from './ItemTypes.js'



class ItemCom extends PureComponent {
    constructor(props) {
        super(props);
    }

    render(){
        const { content, connectDropTarget, connectDragSource, isDragging } = this.props
        const opacity = isDragging ? 0 : 1
        return connectDropTarget(connectDragSource(&lt;div style={{ opacity }} className=&quot;tab-item&quot;&gt;{content}&lt;/div&gt;))
    }
}

const dropTarget = DropTarget(ItemTypes.TAB, {
    drop(props, monitor, component) {
        if(props.index != monitor.getItem().index) {
            props.changeTabLocation(props.index, monitor.getItem().index)
        }
        console.log(props)
        console.log(monitor.getItem())
    },
},(connect)=&gt; ({
    connectDropTarget: connect.dropTarget(),
}))(ItemCom)

const DargSourceDom = DragSource( ItemTypes.TAB, {
        beginDrag(props) {
            const { content, index } = props;
            return { content, index };
        },
    }, (connect, monitor) =&gt; ({
        connectDragSource: connect.dragSource(),
        isDragging: monitor.isDragging(),
    })
)(dropTarget)


const TabItem = ({ tabs, changeTabLocation}) =&gt; {
    return &lt;div&gt;
        {
            tabs.map((item,index)=&gt; {
                return &lt;DargSourceDom index={index} changeTabLocation={changeTabLocation}  content={item}/&gt;
            })
        }
    &lt;/div&gt;
}

export default TabItem

</code></pre>
<ol>
<li>
<p>在 <code>DropTarget</code> 中对于 <code>drop</code> 的处理</p>
</li>
<li>
<p>对于 <code>DropTarget</code> <code>DragSource</code> 所做的包裹处理。</p>
<p>这两个方法第三个参数都是传到 <code>ItemCom</code> 中的  <code>props</code> 中。</p>
<p>​	关于 <code>monitor</code> 中可以监听到的状态 这里有详细的介绍 <a href="https://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor">DragSourceMonitor</a> <a href="https://react-dnd.github.io/react-dnd/docs/api/drop-target-monitor">DropTargetMonitor</a> 。</p>
</li>
<li>
<p>添加  CustomDragLayer</p>
<p>3.1 添加 CunstomDragLayer</p>
<pre><code class="language-jsx">import Container from './Container';
import CustomDragLayer from './CustomDragLayer';
import { DndProvider } from &quot;react-dnd&quot;;
import {HTML5Backend} from &quot;react-dnd-html5-backend&quot;;

export const Example = () =&gt; {
    return (&lt;DndProvider backend={ HTML5Backend }&gt;
			&lt;Container /&gt;
			&lt;CustomDragLayer /&gt;
		&lt;/DndProvider&gt;);
};

</code></pre>
<p>CustomDragLayer.js</p>
<pre><code class="language-jsx">import { DragLayer } from 'react-dnd';
import { ItemTypes } from './ItemTypes';
import { BoxDragPreview } from './BoxDragPreview';
const layerStyles = {
    position: 'fixed',
    pointerEvents: 'none',
    zIndex: 100,
    left: 0,
    top: 0,
    width: '100%',
    height: '100%',
};
function getItemStyles (props) {
    const { initialOffset, currentOffset } = props
    if (!initialOffset || !currentOffset) {
        return {
            display: 'none'
        }
    }

    let { x, y } = currentOffset
    y = initialOffset.y

    const transform = `translate(${x}px, ${y}px)`
    return {
        transform: transform,
        WebkitTransform: transform
    }
}
const CustomDragLayer = (props) =&gt; {
    const { item, itemType, isDragging } = props;
    function renderItem() {
        switch (itemType) {
            case ItemTypes.BOX:
                return &lt;BoxDragPreview title={item.title}/&gt;;
            default:
                return null;
        }
    }
    if (!isDragging) {
        return null;
    }
    return (&lt;div style={layerStyles}&gt;
			&lt;div style={getItemStyles(props)}&gt;{renderItem()}&lt;/div&gt;
		&lt;/div&gt;);
};
export default DragLayer((monitor,props) =&gt; {
    return ({
        item: monitor.getItem(),
        itemType: monitor.getItemType(),
        initialOffset: monitor.getInitialSourceClientOffset(),
        currentOffset: monitor.getSourceClientOffset(),
        isDragging: monitor.isDragging(),
    })
})(CustomDragLayer);

</code></pre>
<p>3.2 隐藏原生的拖动动画</p>
<pre><code class="language-jsx">import { PureComponent } from 'react';
import { DragSource } from 'react-dnd';
import { getEmptyImage } from 'react-dnd-html5-backend';
import { ItemTypes } from './ItemTypes';
import { Box } from './Box';
function getStyles(props) {
    const { left, top, isDragging } = props;
    const transform = `translate3d(${left}px, ${top}px, 0)`;
    return {
        position: 'absolute',
        transform,
        WebkitTransform: transform,
        // IE fallback: hide the real node using CSS when dragging
        // because IE will ignore our custom &quot;empty image&quot; drag preview.
        opacity: isDragging ? 0 : 1,
        height: isDragging ? 0 : '',
    };
}
class DraggableBox extends PureComponent {
    componentDidMount() {
        const { connectDragPreview } = this.props;
        if (connectDragPreview) {
            // Use empty image as a drag preview so browsers don't draw it
            // and we can draw whatever we want on the custom drag layer instead.
            connectDragPreview(getEmptyImage(), {
                // IE fallback: specify that we'd rather screenshot the node
                // when it already knows it's being dragged so we can hide it with CSS.
                captureDraggingState: true,
            });
        }
    }
    render() {
        const { title, connectDragSource } = this.props;
        return connectDragSource(&lt;div style={getStyles(this.props)} role=&quot;DraggableBox&quot;&gt;
				&lt;Box title={title}/&gt;
			&lt;/div&gt;);
    }
}
export default DragSource(ItemTypes.BOX, {
    beginDrag(props) {
        const { id, title, left, top } = props;
        return { id, title, left, top };
    },
}, (connect, monitor) =&gt; ({
    connectDragSource: connect.dragSource(),
    connectDragPreview: connect.dragPreview(),
    isDragging: monitor.isDragging(),
}))(DraggableBox);

</code></pre>
<p>3.3 这种CustomDragLayer的核心方法就是 CustomDragLayer.js中的 <code>getItemStyles</code>:</p>
<pre><code class="language-jsx">function getItemStyles (props) {
    const { initialOffset, currentOffset } = props
    if (!initialOffset || !currentOffset) {
        return {
            display: 'none'
        }
    }

    let { x, y } = currentOffset
    y = initialOffset.y

    //这里的 x y 坐标就是计算出来的 定制化拖动对象坐标
    const transform = `translate(${x}px, ${y}px)`
    return {
        transform: transform,
        WebkitTransform: transform
    }
}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React.memo()]]></title>
        <id>https://DennyWanye.GitHub.io/post/reactmemo/</id>
        <link href="https://DennyWanye.GitHub.io/post/reactmemo/">
        </link>
        <updated>2022-02-15T04:00:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1怎么使用">1.怎么使用</h3>
<p>React.memo 是用来决定在何种条件改变下，组件重新渲染。可以减少一次渲染中组件渲染的数量，从而提升用户体验。</p>
<pre><code class="language-javascript">React.memo(MyComponent, areEqual)

function areEqual () {
    /*
  return true if passing nextProps to render would return
  the same result as passing prevProps to render,
  otherwise return false
  */
}
</code></pre>
<p>MyComponent: 代表的是你需要包裹的组件。</p>
<p>areEqual： 是可选项，判断是否进行渲染的函数，返回值为布尔值。</p>
<h3 id="2注意项">2.注意项</h3>
<p>2.1 当areEqual没有传入的时候，其是比较组件的 props ，来判断组件是否变更，如果变更就进行重新渲染，如果没有就不对该组件进行渲染。</p>
<p>2.2 React.memo的作用原理是判断props是否发生改变（或者是传入的areEqual函数返回的布尔值），如果是true，就重新渲染组件，反之不做其他操作。如果你的组件中有用到 <a href="https://reactjs.org/docs/hooks-state.html"><code>useState</code></a>, <a href="https://reactjs.org/docs/hooks-reference.html#usereducer"><code>useReducer</code></a> 或者 <a href="https://reactjs.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a> Hook的话，当state或者context改变的时候，该组件还是会更新。</p>
<p>2.3 当你向被memo包裹的组件传入回调函数的时候，在每一次渲染时，父组件都会提供一个不同的函数实例，这也就导致此时即使你的其他props数据都相同，但是因为传入的回调函数实例不同，导致每次渲染都会刷新该组件。</p>
<p>原因：</p>
<pre><code class="language-javascript">function sumNumber() {
    return (a, b) =&gt; a + b
}

const sum1 = sumNumber()
const sum2 = sumNumber()

console.log(sum1 === sum1)  //=&gt; true
console.log(sum2 === sum2)  //=&gt; true
console.log(sum1 === sum2)  //=&gt; false
</code></pre>
<p>此时我们可以用 <a href="https://reactjs.org/docs/hooks-reference.html#usecallback"><code>useCallback</code></a>来解决</p>
<pre><code class="language-javascript">const MemoizedLogout = React.memo(Logout);
function MyApp({ store, cookies }) {
  const onLogout = useCallback(
    () =&gt; cookies.clear('session'), 
    [cookies]
  );
  return (
    &lt;div className=&quot;main&quot;&gt;
      &lt;header&gt;
        &lt;MemoizedLogout
          username={store.username}
          onLogout={onLogout}
        /&gt;
      &lt;/header&gt;
      {store.content}
    &lt;/div&gt;
  );
}
</code></pre>
<p>###3.何时使用React.memo</p>
<p>3.1 &quot;Performance-related changes applied incorrectly can even harm performance. Use React.memo() wisely.&quot;</p>
<p>可使用规则： 如果你不能确认性能提升的多少，就不要使用React.memo</p>
<p>3.2 &quot;Performance-related changes applied incorrectly can even harm performance. Use React.memo() wisely.&quot;</p>
<p>一般来说，对于类组件，不建议使用React.memo()。类组件可以使用<code>shouldComponentUpdate()</code>方法，或者对 <code>PureComponent</code> 类组件进行扩展。</p>
<p>3.3 小心无用的比较</p>
<p><code>React.memo</code> 总是执行两件事：</p>
<ol>
<li>调用比较函数，来确认props是否发生改变</li>
<li>如果发生了改变就渲染更新该组件，没有就不做渲染<br>
所以当你在错误的地方调用了 <code>React.memo</code> 的时候，也就会错误的调用比较函数，造成性能的浪费。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[费曼学习法]]></title>
        <id>https://DennyWanye.GitHub.io/post/fei-man-xue-xi-fa/</id>
        <link href="https://DennyWanye.GitHub.io/post/fei-man-xue-xi-fa/">
        </link>
        <updated>2022-02-15T03:01:41.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/3772712/pexels-photo-3772712.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;w=1920" alt="" loading="lazy"></figure>
<h3 id="1确定目标">1.确定目标</h3>
<p>确认自己对这个目标是否有强烈的动机</p>
<h3 id="2模拟教学">2.模拟教学</h3>
<p><strong>通过教授他人，教授者对于知识的吸收率达到了90%。</strong></p>
<p>我们可以在博客中写文章，模拟自己教授他人的情况，来近似达到这一目的（存疑？）</p>
<figure data-type="image" tabindex="2"><img src="https://DennyWanye.GitHub.io/post-images/1644895331651.png" alt="" loading="lazy"></figure>
<p>注意：学习金字塔不一定是科学的，现在它的出处也无从考究，但它的理念很有启发性。</p>
<h3 id="3重复回顾">3.重复回顾</h3>
<p>在上述的两个过程中，会产生新的目标（也就是新的问题、发现新的知识盲区等等），此时我们就需要重复上述的步骤，来解决新的目标——通过查找各种资料，将新的目标解决，然后将解决的过程记录并背下来，讲给想象中的小白听，在博客上就是将解决目标的过程梳理成教程记录下来。</p>
<p><strong>注意：重点是需要用自己思考之后的语言表达出来。</strong></p>
<h3 id="4概念简化">4.概念简化</h3>
<p>费曼老爷子有一句很经典的话「If I couldn’t reduce it to the freshman level. That means we really don’t understand it.」</p>
<p>将知晓的概念简化，</p>
<p><strong>是用更简单的概念来表达，而不是用更少的语言来表达</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rule for coding]]></title>
        <id>https://DennyWanye.GitHub.io/post/rule-for-coding/</id>
        <link href="https://DennyWanye.GitHub.io/post/rule-for-coding/">
        </link>
        <updated>2022-02-14T10:17:46.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/7092371/pexels-photo-7092371.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=1920" alt="" loading="lazy"></figure>
<p><strong>If a component doesn't need some data for rendering, it doesn't need that data at all.</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[舒适区]]></title>
        <id>https://DennyWanye.GitHub.io/post/comfort-zone/</id>
        <link href="https://DennyWanye.GitHub.io/post/comfort-zone/">
        </link>
        <updated>2022-02-14T05:08:04.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/5255255/pexels-photo-5255255.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=1920" alt="" loading="lazy"><br>
每个人都是趋向于舒适区，而且舒适区的范围也会随着主体的适应范围而变。</p>
<ul>
<li>如果本体一下子步入到舒适区之外太远，本体则会感到极端的不适应、对于本体的成长会非常不利。</li>
<li>如果本体一直在不断的步入舒适区之外，本体也会感到疲倦、难受。</li>
<li>如果本体一直呆在舒适区的范围中，本体会感到无趣乃至生活如一潭死水。</li>
</ul>
<p>也就意味着：</p>
<ul>
<li>不应该离开自己的舒适区太远</li>
<li>舒适区对于<strong>生活中的困难</strong>来说是一个相对性概念。因为本体变强，所以以前觉得困难的事情，现在觉得简单。</li>
<li>一直呆在舒适区中，会变得失去斗志，会变成中年胖大叔。</li>
</ul>
<p>所以，不要自己变成中年胖大叔，不要自己变成一潭死水，应该：</p>
<ul>
<li>一点点的探索本体舒适区的极限，当然是在适合自己的感兴趣的方向。</li>
<li>小心<strong>温水煮青蛙</strong></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一次使用Blog]]></title>
        <id>https://DennyWanye.GitHub.io/post/first_blog/</id>
        <link href="https://DennyWanye.GitHub.io/post/first_blog/">
        </link>
        <updated>2021-12-11T11:03:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://images.pexels.com/photos/629162/pexels-photo-629162.jpeg?cs=srgb&amp;dl=pexels-eberhard-grossgasteiger-629162.jpg&amp;fm=jpg&amp;h=400" alt="" loading="lazy"></figure>
<p>于2022/2/11第一次使用Gridea做了这个blog（在同事的建议下）。最开始的原因是记录开发中遇见的问题，方便后续的查阅。但现在想一想觉得，也可以记录下来一些自己的所思所想。因为博客的意义是<strong>记录</strong></p>
]]></content>
    </entry>
</feed>